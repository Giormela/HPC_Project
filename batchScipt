#!/bin/bash
#SBATCH --time=4

# The line SBATCH --time=4 means: max exec time of the batch is 4 minutes
# When developping and debuging: use small test and small time limits
# After you can sublit Batch with 15, 30, 60, 120 minutes

source /etc/profile

module load py-mpi4py/3.1.4/gcc-12.3.0-openmpi
#module load ... others modules to load

# go in the right directory (where is the pgm to execute)
cd ~/HPC_Project


echo "============= TITLE OF MY BATCH ================="

# Command to execute
# ex : 8 processes distributed on 2 nodes: 2 per socket (i.e. 4 per node)

#@param -n = -np number process 
#@param -u = -u user number 
#@param -m = -m method
#@param -f = -d debug option 
numberProcess=-1
user=-1
method=-1
debug=false

while getopts 'n:u:m:d' flag; do
    case "${flag}" in
        n) numberProcess="${OPTARG}" ;;
        u) user="${OPTARG}" ;;
        m) method="${OPTARG}" ;;
        d) debug='true' ;;
    esac
done
echo $numberProcess
if ! [[ "$numberProcess" =~ ^[1-8]+$ ]]; then
    echo "Error: Argument numberProcess is not between 1 and 8"
    exit 128
fi
if ! [[ "$user" =~ ^[1-9]+$ ]]; then
    echo "Error: Argument user is not a number"
    exit 128
fi
if ! [[ "$method" =~ ^[1-9]+$ ]]; then
    echo "Error: Argument method is not a number"
    exit 128
fi
echo "$debug"
if ! $debug; then
echo "===================== MPIRUN ======================="
# --user [your user number]
# --distribution n : 1 for Linear, 2 for Quadratic, 3 for ReLU
/usr/bin/mpirun -np $numberProcess -map-by ppr:1:node:PE=16 -rank-by core python3 ACO-mpi.py --user $user --method $method
# ex to test 4 processes on one node (no communications)
#/usr/bin/mpirun -np 4 -map-by ppr:1:core:PE=1 -rank-by core python3 myappli.py args_of_my_appli
fi

echo "===================== END ======================="

